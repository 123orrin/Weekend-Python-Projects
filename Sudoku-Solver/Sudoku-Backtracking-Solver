from sudoku import *
import time

"""
SUDOKU BACKTRACKING ALGORITHM
By Orrin Dahanaggamaarachchi

GENERAL NOTES
- User inputted rows and columns are indexed starting at 1
- All other row and column computation is done with indexes starting at 0
- Linecache starts its indexing at 1
- MUST INCLUDE the sudoku_database.csv file to generate sudoku's
    - Source: Kaggle by KYUBYONG PARK, https://www.kaggle.com/datasets/bryanpark/sudoku
- Here is a simple board for debugging
    - debugging_board = [1,2,3,4,5,6,7,8,9,4,5,6,7,8,9,1,2,3,7,8,9,1,2,3,4,5,6,2,3,4,5,6,7,8,9,1,5,6,7,8,9,1,2,3,4,8,9,1,2,3,4,5,6,7,3,4,5,6,7,8,9,1,2,6,7,8,9,1,2,3,4,5,9,1,2,3,4,5,6,7,8]

REFERENCE
 - Wikipedia: https://en.wikipedia.org/wiki/Sudoku_solving_algorithms#Backtracking
"""

def backtracking(board, unchangeable):
    location = find_not_unchangeable_location(0, unchangeable, direction='forward')
    while location < 81:
        num = board[location]
        while not check_game_rules(num, location, board) and num < 10:
            num += 1
        if num < 10:
            board[location] = num
            location = location + 1
            location = find_not_unchangeable_location(location, unchangeable, direction='forward')
        else:
            board[location] = 0
            location = location - 1
            location = find_not_unchangeable_location(location, unchangeable, direction='backward')

def find_not_unchangeable_location(curr_location, unchangeable, direction):
    add = -1
    if direction == 'forward':
        add = 1

    while curr_location in unchangeable:
        curr_location = curr_location + add
    return curr_location


if __name__ == '__main__':
    board, unchangeable = create_board()
    print('\nUnsolved:')
    print_board(board)
    print('\nSolved:')
    backtracking(board, unchangeable)
    print_board(board)
    print("DONE")
    
